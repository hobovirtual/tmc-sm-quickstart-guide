#@ load("@ytt:data", "data")
#@yaml/text-templated-strings
---
apiVersion: v1
kind: Namespace
metadata:
  creationTimestamp: null
  name: dex
spec: {}
status: {}
---
apiVersion: v1
automountServiceAccountToken: true
kind: ServiceAccount
metadata:
  name: dex
  namespace: dex
  labels:
    app.kubernetes.io/name: dex
    app.kubernetes.io/instance: dex
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: dex-tls
  namespace: dex
spec:
  commonName: #@ "dex.{}".format(data.values.domain)
  dnsNames:
  - #@ "dex.{}".format(data.values.domain)
  issuerRef:
    kind: ClusterIssuer
    name: #@ data.values.certmanager.clusterissuer
  secretName: dex-tls
---
apiVersion: projectcontour.io/v1
kind: HTTPProxy
metadata:
  name: dex
  namespace: dex
spec:
  ingressClassName: tmc-local
  virtualhost:
    fqdn: #@ "dex.{}".format(data.values.domain)
    tls:
      secretName: dex-tls
  tcpproxy:
    services:
    - name: dex
      port: 5554
      protocol: tls
---
#@ issuer="https://dex.{}".format(data.values.domain)
#@ redirectURi="https://pinniped-supervisor.{}/provider/pinniped/callback".format(data.values.domain)
apiVersion: v1
kind: Secret
metadata:
  name: dex
  namespace: dex
type: Opaque
stringData:
#@yaml/text-templated-strings
  config.yaml: |
    issuer: (@= issuer @)
    staticClients:
    - id: tmc-auth
      redirectURIs:
      - (@= redirectURi @)
      name: 'tmc-auth'
      secret: secretvalue
    oauth2:
      skipApprovalScreen: true
    storage:
      type: memory
    web:
      https: 0.0.0.0:5554
      tlsCert: /certs/tls.crt
      tlsKey: /certs/tls.key
    connectors:
    - type: ldap
      name: OpenLDAP
      id: ldap
      config:
        host: openldap.openldap.svc:389
        insecureNoSSL: true
        bindDN: cn=admin,dc=pinniped,dc=dev
        bindPW: password
        usernamePrompt: Username
        userSearch:
          baseDN: dc=pinniped,dc=dev
          filter: (objectClass=inetOrgPerson)
          username: cn
          idAttr: cn
          emailAttr: cn
          nameAttr: cn
        groupSearch:
          baseDN: dc=pinniped,dc=dev
          filter: (objectClass=groupOfUniqueNames)
          userMatchers:
          - userAttr: DN
            groupAttr: uniqueMember
          nameAttr: cn
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: dex
  namespace: dex
  labels:
    app.kubernetes.io/name: dex
    app.kubernetes.io/instance: dex
rules:
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - list
  - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: dex-cluster
  namespace: dex
  labels:
    app.kubernetes.io/name: dex
    app.kubernetes.io/instance: dex
roleRef:
  kind: ClusterRole
  apiGroup: rbac.authorization.k8s.io
  name: dex
subjects:
- kind: ServiceAccount
  namespace: default
  name: dex
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: dex
  namespace: dex
  labels:
    app.kubernetes.io/name: dex
    app.kubernetes.io/instance: dex
rules:
- apiGroups:
  - dex.coreos.com
  resources:
  - '*'
  verbs:
  - '*'
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: dex
  namespace: dex
  labels:
    helm.sh/chart: dex-0.12.1
    app.kubernetes.io/name: dex
    app.kubernetes.io/instance: dex
roleRef:
  kind: Role
  apiGroup: rbac.authorization.k8s.io
  name: dex
subjects:
- kind: ServiceAccount
  namespace: default
  name: dex
---
apiVersion: v1
kind: Service
metadata:
  name: dex
  namespace: dex
  labels:
    app.kubernetes.io/name: dex
    app.kubernetes.io/instance: dex
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 5556
    targetPort: http
    protocol: TCP
    appProtocol: http
  - name: https
    port: 5554
    targetPort: https
    protocol: TCP
    appProtocol: https
  - name: telemetry
    port: 5558
    targetPort: telemetry
    protocol: TCP
    appProtocol: http
  selector:
    app.kubernetes.io/name: dex
    app.kubernetes.io/instance: dex
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dex
  namespace: dex
  labels:
    app.kubernetes.io/name: dex
    app.kubernetes.io/instance: dex
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: dex
      app.kubernetes.io/instance: dex
  template:
    metadata:
      annotations:
        checksum/config: 5620ea83fa0ca807c735c2af6d75c95da335d8fedd92a6f166b34e1a614d03a2
      labels:
        app.kubernetes.io/name: dex
        app.kubernetes.io/instance: dex
    spec:
      serviceAccountName: dex
      securityContext: {}
      containers:
      - name: dex
        securityContext: {}
        image: #@ "{}/dex:{}".format(data.values.registry.dex.repo,data.values.registry.dex.version)
        imagePullPolicy: IfNotPresent
        args:
        - dex
        - serve
        - --web-http-addr
        - 0.0.0.0:5556
        - --web-https-addr
        - 0.0.0.0:5554
        - --telemetry-addr
        - 0.0.0.0:5558
        - /etc/dex/config.yaml
        ports:
        - name: http
          containerPort: 5556
          protocol: TCP
        - name: https
          containerPort: 5554
          protocol: TCP
        - name: telemetry
          containerPort: 5558
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /healthz/live
            port: telemetry
        readinessProbe:
          httpGet:
            path: /healthz/ready
            port: telemetry
        resources: {}
        volumeMounts:
        - name: config
          mountPath: /etc/dex
          readOnly: true
        - mountPath: /certs
          name: certs
          readOnly: true
      volumes:
      - name: config
        secret:
          secretName: dex
      - name: certs
        secret:
          secretName: dex-tls
---
apiVersion: v1
kind: Secret
metadata:
  name: overlay-secret-dex
  namespace: tmc-local
stringData:
  patch.yaml: |
    #@ load("@ytt:data", "data")
    #@ load("@ytt:overlay", "overlay")
    ---
    #@overlay/match by=overlay.subset({"kind":"OIDCIdentityProvider", "metadata": {"name": "pinniped-upstream"}})
    ---
    #@overlay/match-child-defaults missing_ok=True
    spec:
      authorizationConfig:
        additionalScopes:
          - groups
      claims:
        username: email
---
apiVersion: v1
kind: Secret
metadata:
  name: tmc-overlay-override-dex
  namespace: tmc-local
stringData:
  patch-oidc.yaml: |
    #@ load("@ytt:overlay", "overlay")
    #@overlay/match by=overlay.subset({"kind":"PackageInstall", "metadata": {"name": "tmc-local-stack"}})
    ---
    metadata:
      annotations:
        #@overlay/match missing_ok=True
        ext.packaging.carvel.dev/ytt-paths-from-secret-name.2: overlay-secret-dex
